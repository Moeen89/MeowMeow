
server {
    listen 80 default_server;
    server_name localhost;
    # return 301 https://$host$request_uri;

    location / {
    proxy_pass https://localhost:443;
    }



}



server {

    listen 443 ssl;

    server_name localhost;

    ssl_certificate /etc/nginx/conf.d/server.crt;
    ssl_certificate_key /etc/nginx/conf.d/server.key;

        
    location / {

    proxy_redirect off;
    real_ip_header X-Forwarded-For;
    proxy_pass http://localhost:6433;
    }

################## Performance ##################


    ## 1- Enabling Gzip Compression:
    gzip on; #Enables gzip compression.
    gzip_vary on; #Tells proxies to cache both gzipped and regular versions of a resource.
    gzip_min_length 10240; #Informs NGINX to not compress anything smaller than the defined size.
    gzip_proxied expired no-cache no-store private auth; # Compress data even for clients that are connecting via proxies.
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml; #Enables the types of files that can be compressed.
    gzip_disable "MSIE [1-6]\."; #“MSIE [1-6]\.”; – disable compression for Internet Explorer versions 1-6. 
    
    
    ## 2- Change the size of the Buffers:
    client_body_buffer_size 10K; # Sets buffer size for reading client request body.
    client_header_buffer_size 1k; # Refers to the buffer size relative to the client request header
    client_max_body_size 8m; # Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field.
    large_client_header_buffers 4 4k; # Maximum number and size of buffers for large client headers.
    
    
    ## 3- Reducing Timeouts:
    client_body_timeout 12; # Defines a timeout for reading the client request body.
    client_header_timeout 12;# Defines a timeout for reading the client request header
    keepalive_timeout 15; # During which a keep-alive client connection will stay open on the server side
    send_timeout 10;# Sets a timeout for transmitting a response to the client.
    # (for security also)

    ## 4- Disabling access logs (If required):
    access_log off;


    # worker_processes auto;
    # worker_rlimit_nofile 100000;


##############################################


################## Security ##################


    ## 1. Disable Unnecessary HTTP Methods:
     if ($request_method !~ ^(GET|HEAD|POST)$ ) {
         return 444;
     }
    # only alowing for GET, HEAD and POST methods which are not harmful
    # and necessary for web operations.
    # while dissabling other HTTP methods such as DELETE and TRACE which
    # are unnecessary.


    ## 2. Disable the Display of Nginx Version Number:
    server_tokens off;


    ## 3. Stop Deep Linking or Hot Linking:
    location /images/ {
        valid_referers none blocked localhost;
        if ($invalid_referer) {
        return 403;
    }
    # Image or HTML hotlinking means someone makes a link to your site 
    # to one of your images, but displays it on their own site. 
    # The end result you will end up paying for bandwidth bills and make 
    # the content look like part of the hijacker’s site. 
    }
    
    
    ## 4. Deny Certain User-Agents:
     if ($http_user_agent ~* msnbot|scrapbot) {
            return 403;
     }
    # You can easily block user-agents i.e. scanners, bots, and spammers 
    # who may be abusing your server.
    # In the cod above we are blocking robots called msnbots and scrapbots.


    ## 5. Configure Nginx to Avoid Clickjacking:
    add_header X-Frame-Options SAMEORIGIN;
    # dding the parameter add_header X-Frame-Options "SAMEORIGIN" to 
    # the server section of your Nginx configuration prevents 
    # clickjacking attacks by allowing/disallowing the browser to render iframes.
     

###############################################


}