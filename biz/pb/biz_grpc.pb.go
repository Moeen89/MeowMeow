// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pb/biz.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetUsersClient is the client API for GetUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUsersClient interface {
	GetUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUsersWithSqlInject(ctx context.Context, in *UserRequestWithSqlInject, opts ...grpc.CallOption) (*UserResponse, error)
	CheckKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error)
}

type getUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsersClient(cc grpc.ClientConnInterface) GetUsersClient {
	return &getUsersClient{cc}
}

func (c *getUsersClient) GetUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/biz.v1.get_users/get_users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUsersClient) GetUsersWithSqlInject(ctx context.Context, in *UserRequestWithSqlInject, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/biz.v1.get_users/get_users_with_sql_inject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUsersClient) CheckKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error) {
	out := new(Val)
	err := c.cc.Invoke(ctx, "/biz.v1.get_users/check_key", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsersServer is the server API for GetUsers service.
// All implementations must embed UnimplementedGetUsersServer
// for forward compatibility
type GetUsersServer interface {
	GetUsers(context.Context, *UserRequest) (*UserResponse, error)
	GetUsersWithSqlInject(context.Context, *UserRequestWithSqlInject) (*UserResponse, error)
	CheckKey(context.Context, *Key) (*Val, error)
	mustEmbedUnimplementedGetUsersServer()
}

// UnimplementedGetUsersServer must be embedded to have forward compatible implementations.
type UnimplementedGetUsersServer struct {
}

func (UnimplementedGetUsersServer) GetUsers(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedGetUsersServer) GetUsersWithSqlInject(context.Context, *UserRequestWithSqlInject) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithSqlInject not implemented")
}
func (UnimplementedGetUsersServer) CheckKey(context.Context, *Key) (*Val, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckKey not implemented")
}
func (UnimplementedGetUsersServer) mustEmbedUnimplementedGetUsersServer() {}

// UnsafeGetUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUsersServer will
// result in compilation errors.
type UnsafeGetUsersServer interface {
	mustEmbedUnimplementedGetUsersServer()
}

func RegisterGetUsersServer(s grpc.ServiceRegistrar, srv GetUsersServer) {
	s.RegisterService(&GetUsers_ServiceDesc, srv)
}

func _GetUsers_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biz.v1.get_users/get_users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersServer).GetUsers(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetUsers_GetUsersWithSqlInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequestWithSqlInject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersServer).GetUsersWithSqlInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biz.v1.get_users/get_users_with_sql_inject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersServer).GetUsersWithSqlInject(ctx, req.(*UserRequestWithSqlInject))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetUsers_CheckKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersServer).CheckKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biz.v1.get_users/check_key",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersServer).CheckKey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUsers_ServiceDesc is the grpc.ServiceDesc for GetUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biz.v1.get_users",
	HandlerType: (*GetUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_users",
			Handler:    _GetUsers_GetUsers_Handler,
		},
		{
			MethodName: "get_users_with_sql_inject",
			Handler:    _GetUsers_GetUsersWithSqlInject_Handler,
		},
		{
			MethodName: "check_key",
			Handler:    _GetUsers_CheckKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/biz.proto",
}
