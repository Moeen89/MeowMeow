# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import biz_pb2 as biz__pb2


class get_usersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_users = channel.unary_unary(
                '/biz.v1.get_users/get_users',
                request_serializer=biz__pb2.UserRequest.SerializeToString,
                response_deserializer=biz__pb2.UserResponse.FromString,
                )
        self.get_users_with_sql_inject = channel.unary_unary(
                '/biz.v1.get_users/get_users_with_sql_inject',
                request_serializer=biz__pb2.UserRequest_with_sql_inject.SerializeToString,
                response_deserializer=biz__pb2.UserResponse.FromString,
                )
        self.check_key = channel.unary_unary(
                '/biz.v1.get_users/check_key',
                request_serializer=biz__pb2.key.SerializeToString,
                response_deserializer=biz__pb2.val.FromString,
                )


class get_usersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_users(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_users_with_sql_inject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_get_usersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_users': grpc.unary_unary_rpc_method_handler(
                    servicer.get_users,
                    request_deserializer=biz__pb2.UserRequest.FromString,
                    response_serializer=biz__pb2.UserResponse.SerializeToString,
            ),
            'get_users_with_sql_inject': grpc.unary_unary_rpc_method_handler(
                    servicer.get_users_with_sql_inject,
                    request_deserializer=biz__pb2.UserRequest_with_sql_inject.FromString,
                    response_serializer=biz__pb2.UserResponse.SerializeToString,
            ),
            'check_key': grpc.unary_unary_rpc_method_handler(
                    servicer.check_key,
                    request_deserializer=biz__pb2.key.FromString,
                    response_serializer=biz__pb2.val.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'biz.v1.get_users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class get_users(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_users(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biz.v1.get_users/get_users',
            biz__pb2.UserRequest.SerializeToString,
            biz__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_users_with_sql_inject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biz.v1.get_users/get_users_with_sql_inject',
            biz__pb2.UserRequest_with_sql_inject.SerializeToString,
            biz__pb2.UserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/biz.v1.get_users/check_key',
            biz__pb2.key.SerializeToString,
            biz__pb2.val.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
